name: Build Application
on: 
  pull_request:
    types:
      - closed
    branches:
      - 'master'
jobs:
  create-release:
    if: github.event.pull_request.merged == true && contains('release/', github.head_ref)
    name: Create release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
      - name: create version tag variable
        id: create_version
        run: echo "VERSION=$(echo ${{ github.head_ref || github.ref_name }} | sed 's/^release\///')" >> "$GITHUB_OUTPUT"
      - name: create release
        uses: actions/create-release@v1
        id: create_release
        with:
          draft: false
          prerelease: false
          release_name: ${{ steps.create_version.outputs.VERSION }}
          tag_name: ${{ steps.create_version.outputs.VERSION }}
          body_path: ./CHANGELOG.md
        env:
          GITHUB_TOKEN: ${{ github.token }}

  build:
    if: github.event.pull_request.merged == true && contains('release/', github.head_ref)
    name: Gradle Build ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: create-release
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-13, macos-14, windows-latest ]
      fail-fast: false
    permissions:
      id-token: write
      contents: write
      attestations: write
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
      - name: Set up JDK 20
        uses: actions/setup-java@v4
        with:
          java-version: '20'
          distribution: 'temurin'
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v3
      - name: Make gradlew executable
        run: chmod +x ./gradlew
      - name: Create MacOS installer
        if: startsWith(matrix.os, 'mac')
        run: |
          ./gradlew --info --stacktrace jpackage
          echo "OUTPUT_FILE=$(find build/jpackage -name "*.dmg" -exec realpath {} \;)" >> $GITHUB_ENV
          echo "MAC_ARCH=$(uname -m)" >> $GITHUB_ENV
      - name: Create Linux installer
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          ./gradlew --info --stacktrace jpackage
          echo "OUTPUT_FILE=$(find build/jpackage -name "*.deb" -exec realpath {} \;)" >> $GITHUB_ENV
      - name: Create Windows installer
        if: startsWith(matrix.os, 'windows')
        run: |
          $env:Path += ";%cd%\wix314-binaries"; .\gradlew jpackage --info --stacktrace
          Get-ChildItem build\jpackage\*.exe | Select-Object -First 1 | % { echo "OUTPUT_FILE=$($_.FullName)" >> $env:GITHUB_ENV }
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-path: "${{ env.OUTPUT_FILE }}"

      - name: upload macOS artifact
        if: startsWith(matrix.os, 'mac')
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ env.OUTPUT_FILE }}
          asset_name: fqlite-${{ matrix.os }}-${{ env.MAC_ARCH }}.dmg
          asset_content_type: application/octet-stream
      - name: upload Windows artifact
        if: startsWith(matrix.os, 'windows')
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ env.OUTPUT_FILE }}
          asset_name: fqlite-${{ matrix.os }}.exe
          asset_content_type: application/octet-stream
      - name: upload Windows artifact
        if: startsWith(matrix.os, 'ubuntu')
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ env.OUTPUT_FILE }}
          asset_name: fqlite-${{ matrix.os }}.deb
          asset_content_type: application/octet-stream