name: Build Application
on:
  pull_request:
    branches:
      - 'master'
jobs:
  get-version:
    name: Get project version
    outputs:
      version: ${{ steps.gradle-version.outputs.version }}
    runs-on: ubuntu-latest
    steps:
      - name: Get project version
        id: gradle-version
        run: |
          echo "version=$(gradle properties -q | awk '/^version:/ {print $2}')" >> "$GITHUB_OUTPUT"
  build:
    name: Gradle Build ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: get-version
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-13, macos-14, windows-latest ]
      fail-fast: false
    permissions:
      attestations: write
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
      - name: Set up JDK 20
        uses: actions/setup-java@v4
        with:
          java-version: '20'
          distribution: 'temurin'
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v3
      - name: Make gradlew executable
        run: chmod +x ./gradlew
        ##########
        # Create installer for each platform
        ##########
      - name: Create MacOS installer
        if: startsWith(matrix.os, 'mac')
        run: |
          ./gradlew --info --stacktrace jpackage
          find build/jpackage -name "*.dmg" -exec sh -c 'x="{}"; mv "$x" "fqlite-${{ needs.get-version.outputs.version }}-macOS-$(uname -m).dmg"' \;
          echo "OUTPUT_FILE=$(realpath fqlite-*)" >> $GITHUB_ENV
      - name: Create Linux installer
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          ./gradlew --info --stacktrace jpackage
          find build/jpackage -name "*.deb" -exec sh -c 'x="{}"; mv "$x" "fqlite-${{ needs.get-version.outputs.version }}-ubuntu.deb"' \;
          echo "OUTPUT_FILE=$(realpath fqlite-*)" >> $GITHUB_ENV
      - name: Create Windows installer
        if: startsWith(matrix.os, 'windows')
        run: |
          $env:Path += ";%cd%\wix314-binaries"; .\gradlew jpackage --info --stacktrace
          $file = Get-ChildItem build\jpackage\*.exe | Select-Object -First 1 | % Rename-Item -Path "$($_.FullName)" -NewName "fqlite-${{ needs.get-version.outputs.version }}-windows.exe" --PassThru
          echo "OUTPUT_FILE=$file" >> $env:GITHUB_ENV
          $hash = Get-FileHash $file
          echo "FILE_HASH=$($hash[0].hash)" >> $env:GITHUB_ENV
        ##########
        # Generate artefact attestation
        ##########
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-path: "${{ env.OUTPUT_FILE }}"
      - uses: actions/upload-artifact@v4
        with:
          name: "${{ env.OUTPUT_FILE }}"
          path: "${{ env.OUTPUT_FILE }}"
          overwrite: true
          retention-days: 14
        ##########
        # Package artefacts
        ##########
        #####
        # Windows - Chocolatey package
        #####
      - name: Generate chocolatey package
        if: startsWith(matrix.os, 'windows')
        uses: crazy-max/ghaction-chocolatey@v3
        with:
          args: pack packaging/choco/fqlite/fqlite.nuspec --version ${{ needs.create-release.outputs.version }}
      - uses: actions/upload-artifact@v4
        if: startsWith(matrix.os, 'windows')
        with:
          name: "fqlite-${{ needs.create-release.outputs.version }}.nupkg"
          path: "fqlite*.nupkg"
          overwrite: true
          retention-days: 14
  publish:
    if: github.event.pull_request.merged == true && contains('release/', github.head_ref)
    name: Publish release artefacts
    runs-on: ubuntu-latest
    needs:
      - build
    outputs:
      version: ${{ steps.create-version.outputs.version }}
    permissions:
      id-token: write
      contents: write
    steps:
        ##########
        # Upload artefact to release for each platform
        ##########
      - name: create version tag variable
        id: create-version
        run: echo "version=$(echo ${{ github.head_ref || github.ref_name }} | sed 's/^release\///')" >> "$GITHUB_OUTPUT"
      - name: get latest macOS artifact
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true
          path: artifacts/
      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          body_path: CHANGELOG.md
          tag_name: ${{ steps.create-version.outputs.version }}
          files: |
            artifacts/*